{"ast":null,"code":"import _classCallCheck from \"/home/giovanni/react-gameoflife/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/giovanni/react-gameoflife/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/giovanni/react-gameoflife/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/giovanni/react-gameoflife/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/giovanni/react-gameoflife/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/giovanni/react-gameoflife/src/Game.js\";\nimport React from 'react';\nimport './Game.css';\nvar CELL_SIZE = 20;\nvar WIDTH = 800;\nvar HEIGHT = 600;\n\nvar Cell =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Cell, _React$Component);\n\n  function Cell() {\n    _classCallCheck(this, Cell);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Cell).apply(this, arguments));\n  }\n\n  _createClass(Cell, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          x = _this$props.x,\n          y = _this$props.y;\n      return React.createElement(\"div\", {\n        className: \"Cell\",\n        style: {\n          left: \"\".concat(CELL_SIZE * x + 1, \"px\"),\n          top: \"\".concat(CELL_SIZE * y + 1, \"px\"),\n          width: \"\".concat(CELL_SIZE - 1, \"px\"),\n          height: \"\".concat(CELL_SIZE - 1, \"px\")\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Cell;\n}(React.Component);\n\nvar Game =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(Game, _React$Component2);\n\n  function Game() {\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Game).call(this));\n    _this.state = {\n      cells: [],\n      isRunning: false,\n      interval: 100\n    };\n\n    _this.handleClick = function (event) {\n      var elemOffset = _this.getElementOffset();\n\n      var offsetX = event.clientX - elemOffset.x;\n      var offsetY = event.clientY - elemOffset.y;\n      var x = Math.floor(offsetX / CELL_SIZE);\n      var y = Math.floor(offsetY / CELL_SIZE);\n\n      if (x >= 0 && x <= _this.cols && y >= 0 && y <= _this.rows) {\n        _this.board[y][x] = !_this.board[y][x];\n      }\n\n      _this.setState({\n        cells: _this.makeCells()\n      });\n    };\n\n    _this.runGame = function () {\n      _this.setState({\n        isRunning: true\n      });\n\n      _this.runIteration();\n    };\n\n    _this.stopGame = function () {\n      _this.setState({\n        isRunning: false\n      });\n\n      if (_this.timeoutHandler) {\n        window.clearTimeout(_this.timeoutHandler);\n        _this.timeoutHandler = null;\n      }\n    };\n\n    _this.handleIntervalChange = function (event) {\n      _this.setState({\n        interval: event.target.value\n      });\n    };\n\n    _this.handleClear = function () {\n      _this.board = _this.makeEmptyBoard();\n\n      _this.setState({\n        cells: _this.makeCells()\n      });\n    };\n\n    _this.handleRandom = function () {\n      for (var y = 0; y < _this.rows; y++) {\n        for (var x = 0; x < _this.cols; x++) {\n          _this.board[y][x] = Math.random() >= 0.5;\n        }\n      }\n\n      _this.setState({\n        cells: _this.makeCells()\n      });\n    };\n\n    _this.rows = HEIGHT / CELL_SIZE;\n    _this.cols = WIDTH / CELL_SIZE;\n    _this.board = _this.makeEmptyBoard();\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"makeEmptyBoard\",\n    value: function makeEmptyBoard() {\n      var board = [];\n\n      for (var y = 0; y < this.rows; y++) {\n        board[y] = [];\n\n        for (var x = 0; x < this.cols; x++) {\n          board[y][x] = false;\n        }\n      }\n\n      return board;\n    }\n  }, {\n    key: \"getElementOffset\",\n    value: function getElementOffset() {\n      var rect = this.boardRef.getBoundingClientRect();\n      var doc = document.documentElement;\n      return {\n        x: rect.left + window.pageXOffset - doc.clientLeft,\n        y: rect.top + window.pageYOffset - doc.clientTop\n      };\n    }\n  }, {\n    key: \"makeCells\",\n    value: function makeCells() {\n      var cells = [];\n\n      for (var y = 0; y < this.rows; y++) {\n        for (var x = 0; x < this.cols; x++) {\n          if (this.board[y][x]) {\n            cells.push({\n              x: x,\n              y: y\n            });\n          }\n        }\n      }\n\n      return cells;\n    }\n  }, {\n    key: \"runIteration\",\n    value: function runIteration() {\n      var _this2 = this;\n\n      var newBoard = this.makeEmptyBoard();\n\n      for (var y = 0; y < this.rows; y++) {\n        for (var x = 0; x < this.cols; x++) {\n          var neighbors = this.calculateNeighbors(this.board, x, y);\n\n          if (this.board[y][x]) {\n            if (neighbors === 2 || neighbors === 3) {\n              newBoard[y][x] = true;\n            } else {\n              newBoard[y][x] = false;\n            }\n          } else {\n            if (!this.board[y][x] && neighbors === 3) {\n              newBoard[y][x] = true;\n            }\n          }\n        }\n      }\n\n      this.board = newBoard;\n      this.setState({\n        cells: this.makeCells()\n      });\n      this.timeoutHandler = window.setTimeout(function () {\n        _this2.runIteration();\n      }, this.state.interval);\n    }\n    /**\n     * Calculate the number of neighbors at point (x, y)\n     * @param {Array} board \n     * @param {int} x \n     * @param {int} y \n     */\n\n  }, {\n    key: \"calculateNeighbors\",\n    value: function calculateNeighbors(board, x, y) {\n      var neighbors = 0;\n      var dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n\n      for (var i = 0; i < dirs.length; i++) {\n        var dir = dirs[i];\n        var y1 = y + dir[0];\n        var x1 = x + dir[1];\n\n        if (x1 >= 0 && x1 < this.cols && y1 >= 0 && y1 < this.rows && board[y1][x1]) {\n          neighbors++;\n        }\n      }\n\n      return neighbors;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state = this.state,\n          cells = _this$state.cells,\n          interval = _this$state.interval,\n          isRunning = _this$state.isRunning;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Board\",\n        style: {\n          width: WIDTH,\n          height: HEIGHT,\n          backgroundSize: \"\".concat(CELL_SIZE, \"px \").concat(CELL_SIZE, \"px\")\n        },\n        onClick: this.handleClick,\n        ref: function ref(n) {\n          _this3.boardRef = n;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, cells.map(function (cell) {\n        return React.createElement(Cell, {\n          x: cell.x,\n          y: cell.y,\n          key: \"\".concat(cell.x, \",\").concat(cell.y),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185\n          },\n          __self: this\n        });\n      })), React.createElement(\"div\", {\n        className: \"controls\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, \"Update every \", React.createElement(\"input\", {\n        value: this.state.interval,\n        onChange: this.handleIntervalChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }), \" msec\", isRunning ? React.createElement(\"button\", {\n        className: \"button\",\n        onClick: this.stopGame,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, \"Stop\") : React.createElement(\"button\", {\n        className: \"button\",\n        onClick: this.runGame,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, \"Run\"), React.createElement(\"button\", {\n        className: \"button\",\n        onClick: this.handleRandom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, \"Random\"), React.createElement(\"button\", {\n        className: \"button\",\n        onClick: this.handleClear,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, \"Clear\")));\n    }\n  }]);\n\n  return Game;\n}(React.Component);\n\nexport default Game;","map":{"version":3,"sources":["/home/giovanni/react-gameoflife/src/Game.js"],"names":["React","CELL_SIZE","WIDTH","HEIGHT","Cell","props","x","y","left","top","width","height","Component","Game","state","cells","isRunning","interval","handleClick","event","elemOffset","getElementOffset","offsetX","clientX","offsetY","clientY","Math","floor","cols","rows","board","setState","makeCells","runGame","runIteration","stopGame","timeoutHandler","window","clearTimeout","handleIntervalChange","target","value","handleClear","makeEmptyBoard","handleRandom","random","rect","boardRef","getBoundingClientRect","doc","document","documentElement","pageXOffset","clientLeft","pageYOffset","clientTop","push","newBoard","neighbors","calculateNeighbors","setTimeout","dirs","i","length","dir","y1","x1","backgroundSize","n","map","cell"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './Game.css';\n\n\nconst CELL_SIZE = 20;\nconst WIDTH = 800;\nconst HEIGHT = 600;\n\n\nclass Cell extends React.Component {\n\n    render() {\n        const { x, y } = this.props;\n        return (\n            <div className=\"Cell\" style={{\n                left: `${CELL_SIZE * x + 1}px`,\n                top: `${CELL_SIZE * y + 1}px`,\n                width: `${CELL_SIZE - 1}px`,\n                height: `${CELL_SIZE - 1}px`,\n            }} />\n        );\n    }\n}\n\n\nclass Game extends React.Component {\n\n    constructor() {\n        super();\n        this.rows = HEIGHT / CELL_SIZE;\n        this.cols = WIDTH / CELL_SIZE;\n\n        this.board = this.makeEmptyBoard();\n    }\n\n    state = {\n        cells: [],\n        isRunning: false,\n        interval: 100,\n    }\n\n    makeEmptyBoard() {\n        let board = [];\n        for (let y = 0; y < this.rows; y++) {\n            board[y] = [];\n            for (let x = 0; x < this.cols; x++) {\n                board[y][x] = false;\n            }\n        }\n\n        return board;\n    }\n\n    getElementOffset() {\n        const rect = this.boardRef.getBoundingClientRect();\n        const doc = document.documentElement;\n\n        return {\n            x: (rect.left + window.pageXOffset) - doc.clientLeft,\n            y: (rect.top + window.pageYOffset) - doc.clientTop,\n        };\n    }\n\n    makeCells() {\n        let cells = [];\n        for (let y = 0; y < this.rows; y++) {\n            for (let x = 0; x < this.cols; x++) {\n                if (this.board[y][x]) {\n                    cells.push({ x, y });\n                }\n            }\n        }\n\n        return cells;\n    }\n\n    handleClick = (event) => {\n\n        const elemOffset = this.getElementOffset();\n        const offsetX = event.clientX - elemOffset.x;\n        const offsetY = event.clientY - elemOffset.y;\n        \n        const x = Math.floor(offsetX / CELL_SIZE);\n        const y = Math.floor(offsetY / CELL_SIZE);\n\n        if (x >= 0 && x <= this.cols && y >= 0 && y <= this.rows) {\n            this.board[y][x] = !this.board[y][x];\n        }\n\n        this.setState({ cells: this.makeCells() });\n    }\n\n    runGame = () => {\n        this.setState({ isRunning: true });\n        this.runIteration();\n    }\n\n    stopGame = () => {\n        this.setState({ isRunning: false });\n        if (this.timeoutHandler) {\n            window.clearTimeout(this.timeoutHandler);\n            this.timeoutHandler = null;\n        }\n    }\n\n    runIteration() {\n        let newBoard = this.makeEmptyBoard();\n\n        for (let y = 0; y < this.rows; y++) {\n            for (let x = 0; x < this.cols; x++) {\n                let neighbors = this.calculateNeighbors(this.board, x, y);\n                if (this.board[y][x]) {\n                    if (neighbors === 2 || neighbors === 3) {\n                        newBoard[y][x] = true;\n                    } else {\n                        newBoard[y][x] = false;\n                    }\n                } else {\n                    if (!this.board[y][x] && neighbors === 3) {\n                        newBoard[y][x] = true;\n                    }\n                }\n            }\n        }\n\n        this.board = newBoard;\n        this.setState({ cells: this.makeCells() });\n\n        this.timeoutHandler = window.setTimeout(() => {\n            this.runIteration();\n        }, this.state.interval);\n    }\n\n    /**\n     * Calculate the number of neighbors at point (x, y)\n     * @param {Array} board \n     * @param {int} x \n     * @param {int} y \n     */\n    calculateNeighbors(board, x, y) {\n        let neighbors = 0;\n        const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n        for (let i = 0; i < dirs.length; i++) {\n            const dir = dirs[i];\n            let y1 = y + dir[0];\n            let x1 = x + dir[1];\n\n            if (x1 >= 0 && x1 < this.cols && y1 >= 0 && y1 < this.rows && board[y1][x1]) {\n                neighbors++;\n            }\n        }\n\n        return neighbors;\n    }\n\n    handleIntervalChange = (event) => {\n        this.setState({ interval: event.target.value });\n    }\n\n    handleClear = () => {\n        this.board = this.makeEmptyBoard();\n        this.setState({ cells: this.makeCells() });\n    }\n\n    handleRandom = () => {\n        for (let y = 0; y < this.rows; y++) {\n            for (let x = 0; x < this.cols; x++) {\n                this.board[y][x] = (Math.random() >= 0.5);\n            }\n        }\n\n        this.setState({ cells: this.makeCells() });\n    }\n\n    render() {\n        const { cells, interval, isRunning } = this.state;\n        return (\n            <div>\n                <div className=\"Board\"\n                    style={{ width: WIDTH, height: HEIGHT, backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`}}\n                    onClick={this.handleClick}\n                    ref={(n) => { this.boardRef = n; }}>\n\n                    {cells.map(cell => (\n                        <Cell x={cell.x} y={cell.y} key={`${cell.x},${cell.y}`}/>\n                    ))}\n                </div>\n\n                <div className=\"controls\">\n                    Update every <input value={this.state.interval} onChange={this.handleIntervalChange} /> msec\n                    {isRunning ?\n                        <button className=\"button\" onClick={this.stopGame}>Stop</button> :\n                        <button className=\"button\" onClick={this.runGame}>Run</button>\n                    }\n                    <button className=\"button\" onClick={this.handleRandom}>Random</button>\n                    <button className=\"button\" onClick={this.handleClear}>Clear</button>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}